
What is JSX?
JSX stands for JavaScript XML.
JSX allows us to write HTML elements in JavaScript and place them in the DOM without any createElement() and/or appendChild() methods.
JSX converts HTML tags into react elements.


what is Babbel?
Babel is a popular open-source JavaScript compiler that is mainly used to transform ECMAScript 2015+ (ES6+) code into backward-compatible versions of JavaScript that can run in older browsers or environments that do not support the latest JavaScript features.


What is Webpack?
Webpack is an open-source JavaScript module bundler that is widely used in modern web development. It takes modules with dependencies and generates optimized bundles of static assets like JavaScript, CSS, and other files. Webpack is a core tool in the modern JavaScript ecosystem and plays a key role in managing project assets, optimizing performance, and enabling advanced development workflows

Module Bundling: Combines multiple modules into a single file to optimize loading in browsers.
Dependency Resolution: Manages module dependencies and creates a dependency graph.
Loaders: Transforms and processes different file types for inclusion in the bundle.
Code Splitting: Divides code into smaller chunks for efficient loading and caching.
Plugin System: Extends functionality with various plugins for tasks like optimization and asset management.
Asset Handling: Manages and optimizes static assets like images, fonts, and styles.
Dev Server: Provides a local development server with live reloading and other features.
Hot Module Replacement: Updates modules without a full page reload during development.
Environment-specific Configuration: Allows configuration for different environments (development, production).
Performance Optimization: Minifies, compresses, and optimizes assets for better performance.
Code Transformation: Supports preprocessing with tools like Babel for using future JavaScript features.
Integration with CSS: Handles CSS and preprocessors like Sass or Less.
Sourcemaps: Generates source maps to help debug minified and bundled code.
Tree Shaking: Eliminates unused code to reduce bundle size.
Asset Hashing: Appends unique hashes to filenames for cache busting.
Dynamic Imports: Allows loading modules asynchronously when needed.
Webpack Dev Middleware: Integrates with server frameworks for a smoother development experience.
Module Federation: Shares code between applications for microfrontend architectures.
Performance Budgets: Sets size limits to prevent bundles from growing too large.
Configuration: Utilizes a powerful configuration file to tailor the build process.
Overall, Webpack enhances development and production workflows by managing dependencies, optimizing assets, and providing an extensive set of tools for modern JavaScript application development.






Role of type attribute in script tag? What options can I use there?
 The type attribute specifies the type of the script. The type attribute identifies the content between the <script> and </script> tags. It has a Default value which is “text/javascript”.
 type attribute can be of the following types:
- text/javascript : It is the basic standard of writing javascript code inside the <script> tag.
     Syntax
    
    <script type="text/javascript"></script>
    
- text/ecmascript : this value indicates that the script is following the EcmaScript standards.
- module: This value tells the browser that the script is a module that can import or export other files or modules inside it.
- text/babel : This value indicates that the script is a babel type and required bable to transpile it.
- text/typescript: As the name suggest the script is written in TypeScript.

  {TitleComponent} vs {<TitleComponent/>} vs {<TitleComponent></TitleComponent>} in JSX.
 The Difference is stated below:
- {TitleComponent}: This value describes the TitleComponent as a javascript expression or a variable. 
The {} can embed a javascript expression or a variable inside it.
- <TitleComponent/> : This value represents a Component that is basically returning Some JSX value. In simple terms TitleComponent a function that is returning a JSX value.
A component is written inside the {<  />} expression.
- <TitleComponent></TitleComponent> :  <TitleComponent /> and <TitleComponent></TitleComponent> are equivalent only when < TitleComponent /> has no child components. The opening and closing tags are created to include the child components.
 Example

<TitleComponent>
    <FirstChildComponent />
    <SecondChildComponent />
    <ThirdChildComponent />
</TitleComponent>



TitleComponent is an functional component & can be invoked bu 

<TitleComponent/>
<TitleComponent></TitleComponent>
<TitleComponent()/>